<chapter id="speed">

<chapterinfo>
	<author>
		<affiliation>
			<orgname>Samba Team</orgname>
			<address><email>samba@samba.org</email></address>
		</affiliation>
	</author>
	<author>
		<firstname>Paul</firstname><surname>Cochrane</surname>
		<affiliation>
			<orgname>Dundee Limb Fitting Centre</orgname>
			<address><email>paulc@dth.scot.nhs.uk</email></address>
		</affiliation>
	</author>
</chapterinfo>

<title>Samba performance issues</title>

<sect1>
<title>Comparisons</title>

<para>
The Samba server uses TCP to talk to the client. Thus if you are
trying to see if it performs well you should really compare it to
programs that use the same protocol. The most readily available
programs for file transfer that use TCP are ftp or another TCP based
SMB server.
</para>

<para>
If you want to test against something like a NT or WfWg server then
you will have to disable all but TCP on either the client or
server. Otherwise you may well be using a totally different protocol
(such as Netbeui) and comparisons may not be valid.
</para>

<para>
Generally you should find that Samba performs similarly to ftp at raw
transfer speed. It should perform quite a bit faster than NFS,
although this very much depends on your system.
</para>

<para>
Several people have done comparisons between Samba and Novell, NFS or
WinNT. In some cases Samba performed the best, in others the worst. I
suspect the biggest factor is not Samba vs some other system but the
hardware and drivers used on the various systems. Given similar
hardware Samba should certainly be competitive in speed with other
systems.
</para>

</sect1>

<sect1>
<title>Socket options</title>

<para>
There are a number of socket options that can greatly affect the
performance of a TCP based server like Samba.
</para>

<para>
The socket options that Samba uses are settable both on the command
line with the -O option, or in the smb.conf file.
</para>

<para>
The "socket options" section of the smb.conf manual page describes how
to set these and gives recommendations.
</para>

<para>
Getting the socket options right can make a big difference to your
performance, but getting them wrong can degrade it by just as
much. The correct settings are very dependent on your local network.
</para>

<para>
The socket option TCP_NODELAY is the one that seems to make the
biggest single difference for most networks. Many people report that
adding "socket options = TCP_NODELAY" doubles the read performance of
a Samba drive. The best explanation I have seen for this is that the
Microsoft TCP/IP stack is slow in sending tcp ACKs.
</para>

</sect1>

<sect1>
<title>Read size</title>

<para>
The option "read size" affects the overlap of disk reads/writes with
network reads/writes. If the amount of data being transferred in
several of the SMB commands (currently SMBwrite, SMBwriteX and
SMBreadbraw) is larger than this value then the server begins writing
the data before it has received the whole packet from the network, or
in the case of SMBreadbraw, it begins writing to the network before
all the data has been read from disk.
</para>

<para>
This overlapping works best when the speeds of disk and network access
are similar, having very little effect when the speed of one is much
greater than the other.
</para>

<para>
The default value is 16384, but very little experimentation has been
done yet to determine the optimal value, and it is likely that the best
value will vary greatly between systems anyway. A value over 65536 is
pointless and will cause you to allocate memory unnecessarily.
</para>

</sect1>

<sect1>
<title>Max xmit</title>

<para>
At startup the client and server negotiate a "maximum transmit" size,
which limits the size of nearly all SMB commands. You can set the
maximum size that Samba will negotiate using the "max xmit = " option
in smb.conf. Note that this is the maximum size of SMB request that 
Samba will accept, but not the maximum size that the *client* will accept.
The client maximum receive size is sent to Samba by the client and Samba
honours this limit.
</para>

<para>
It defaults to 65536 bytes (the maximum), but it is possible that some
clients may perform better with a smaller transmit unit. Trying values
of less than 2048 is likely to cause severe problems.
</para>

<para>
In most cases the default is the best option.
</para>

</sect1>

<sect1>
<title>Log level</title>

<para>
If you set the log level (also known as "debug level") higher than 2
then you may suffer a large drop in performance. This is because the
server flushes the log file after each operation, which can be very
expensive. 
</para>
</sect1>

<sect1>
<title>Read raw</title>

<para>
The "read raw" operation is designed to be an optimised, low-latency
file read operation. A server may choose to not support it,
however. and Samba makes support for "read raw" optional, with it
being enabled by default.
</para>

<para>
In some cases clients don't handle "read raw" very well and actually
get lower performance using it than they get using the conventional
read operations. 
</para>

<para>
So you might like to try "read raw = no" and see what happens on your
network. It might lower, raise or not affect your performance. Only
testing can really tell.
</para>

</sect1>

<sect1>
<title>Write raw</title>

<para>
The "write raw" operation is designed to be an optimised, low-latency
file write operation. A server may choose to not support it,
however. and Samba makes support for "write raw" optional, with it
being enabled by default.
</para>

<para>
Some machines may find "write raw" slower than normal write, in which
case you may wish to change this option.
</para>

</sect1>

<sect1>
<title>Slow Clients</title>

<para>
One person has reported that setting the protocol to COREPLUS rather
than LANMAN2 gave a dramatic speed improvement (from 10k/s to 150k/s).
</para>

<para>
I suspect that his PC's (386sx16 based) were asking for more data than
they could chew. I suspect a similar speed could be had by setting
"read raw = no" and "max xmit = 2048", instead of changing the
protocol. Lowering the "read size" might also help.
</para>

</sect1>

<sect1>
<title>Slow Logins</title>

<para>
Slow logins are almost always due to the password checking time. Using
the lowest practical "password level" will improve things a lot. You
could also enable the "UFC crypt" option in the Makefile.
</para>

</sect1>

<sect1>
<title>Client tuning</title>

<para>
Often a speed problem can be traced to the client. The client (for
example Windows for Workgroups) can often be tuned for better TCP
performance.
</para>

<para>
See your client docs for details. In particular, I have heard rumours
that the WfWg options TCPWINDOWSIZE and TCPSEGMENTSIZE can have a
large impact on performance.
</para>

<para>
Also note that some people have found that setting DefaultRcvWindow in
the [MSTCP] section of the SYSTEM.INI file under WfWg to 3072 gives a
big improvement. I don't know why.
</para>

<para>
My own experience wth DefaultRcvWindow is that I get much better
performance with a large value (16384 or larger). Other people have
reported that anything over 3072 slows things down enourmously. One
person even reported a speed drop of a factor of 30 when he went from
3072 to 8192. I don't know why.
</para>

<para>
It probably depends a lot on your hardware, and the type of unix box
you have at the other end of the link.
</para>

<para>
Paul Cochrane has done some testing on client side tuning and come 
to the following conclusions:
</para>

<para>
Install the W2setup.exe file from www.microsoft.com. This is an 
update for the winsock stack and utilities which improve performance.
</para>

<para>
Configure the win95 TCPIP registry settings to give better 
perfomance. I use a program called MTUSPEED.exe which I got off the 
net. There are various other utilities of this type freely available. 
The setting which give the best performance for me are:
</para>

<orderedlist>
<listitem><para>
MaxMTU                  Remove
</para></listitem>
<listitem><para>
RWIN                    Remove
</para></listitem>
<listitem><para>
MTUAutoDiscover         Disable
</para></listitem>
<listitem><para>
MTUBlackHoleDetect      Disable
</para></listitem>
<listitem><para>
Time To Live            Enabled
</para></listitem>
<listitem><para>
Time To Live - HOPS     32
</para></listitem>
<listitem><para>
NDI Cache Size          0
</para></listitem>
</orderedlist>

<para>
I tried virtually all of the items mentioned in the document and 
the only one which made a difference to me was the socket options. It 
turned out I was better off without any!!!!!
</para>

<para>
In terms of overall speed of transfer, between various win95 clients 
and a DX2-66 20MB server with a crappy NE2000 compatible and old IDE 
drive (Kernel 2.0.30). The transfer rate was reasonable for 10 baseT.
</para>

<para>
<programlisting>
The figures are:          Put              Get 
P166 client 3Com card:    420-440kB/s      500-520kB/s
P100 client 3Com card:    390-410kB/s      490-510kB/s
DX4-75 client NE2000:     370-380kB/s      330-350kB/s
</programlisting>
</para>

<para>
I based these test on transfer two files a 4.5MB text file and a 15MB 
textfile. The results arn't bad considering the hardware Samba is 
running on. It's a crap machine!!!!
</para>

<para>
The updates mentioned in 1 and 2 brought up the transfer rates from 
just over 100kB/s in some clients.
</para>

<para>
A new client is a P333 connected via a 100MB/s card and hub. The 
transfer rates from this were good: 450-500kB/s on put and 600+kB/s 
on get.
</para>

<para>
Looking at standard FTP throughput, Samba is a bit slower (100kB/s 
upwards). I suppose there is more going on in the samba protocol, but 
if it could get up to the rate of FTP the perfomance would be quite 
staggering.
</para>

</sect1>
</chapter>
